pipeline{
    agent { label 'verify' }
    post {
        success{
                wrap([$class: 'BuildUser']) {
                   script {
                       BUILD_USER = "${env.BUILD_USER}"
                       BUILD_USER_EMAIL = "${env.BUILD_USER_EMAIL}"
                   }
				}
            mail bcc: '',
            body: "Dear ${BUILD_USER},\n\n\tBuild secced. Please check the result.",
            from: 'devops@cixcomputing.com', replyTo: '',
            subject: "Lab loader finished",
            to: "${BUILD_USER_EMAIL}"
        }
        failure {
                wrap([$class: 'BuildUser']) {
                   script {
                       BUILD_USER = "${env.BUILD_USER}"
                       BUILD_USER_EMAIL = "${env.BUILD_USER_EMAIL}"
                   }
				}
            mail bcc: '', body: "Dear ${BUILD_USER},\n\n\tBuild failed. Please check the result.",
            cc: 'li.xu@cixtech.com',
            from: 'devops@cixcomputing.com', replyTo: '',
            subject: "Lab loader finished",
            to: "${BUILD_USER_EMAIL}"
        }
    }

    parameters {

        string(name: 'Input_Parameter', defaultValue: '-a',
        description: 'usage: building test [-h] [--release {cix_sky1_Alpha0.4-rc1}]
                     [--way {shell,env}] [--group {cix,cix,private,cix,sec}]
                     [--platform {emu,fpga}] [--signature {rsa3072,sm2}]
                     [--type {all,minimum}] [--all]

Do building test.

options:
  -h, --help            show this help message and exit
  --release {cix_sky1_Alpha0.4-rc1}, -r {cix_sky1_Alpha0.4-rc1}
                        Give the target release to test like
                        cix_sky1_Alpha0.4-rc1.
  --way {shell,env}, -w {shell,env}
                        Give the build way like shell or env or all for all
                        possible way
  --group {cix,cix,private,cix,sec}, -g {cix,cix,private,cix,sec}
                        Give the code group like private, cix, sec or all for
                        all groups
  --platform {emu,fpga}, -p {emu,fpga}
                        Give the platform to build like fpga, emu, sky1 or all
                        for all possible platforms
  --signature {rsa3072,sm2}, -s {rsa3072,sm2}
                        Give the signature way like sm2 or rsa or all for all
                        possible platforms
  --type {all,minimum}, -t {all,minimum}
                        Give the build type like minimum, all or full for all
                        possible values.
  --all, -a             Choose whether to test all building

Process finished with exit code 0
')


    }
    environment {
        SH_JBN = "${JOB_BASE_NAME}"

        SH_PARA = "$params.Parameter"

        TOLIST = "cix.sw@cixtech.com anthony.tian@cixtech.com peter.zhang@cixtech.com fugang.duan@cixtech.com guoyin.chen@cixtech.com robin.wang@cixtech.com peter.chen@cixtech.com zhan.lou@cixtech.com cagent.zhang@cixtech.com"
        CCLIST = "adeline.wang@cixtech.com gang.liu@cixtech.com"
        FCCLIST = "anthony.tian@cixtech.com"
        FTOLIST = "anthony.tian@cixtech.com"
    }
    stages {
        stage('Building test') {
            steps{
                echo 'This is Firware Flashing step'
                sh '''
                echo $Input_Parameter
                #python3 -u linux_building_test/main.py
                #/home/svc.swciuser/envs/devops/bin/python3 -u main.py $Input_Parameter
                '''
            }
        }
    }
}
